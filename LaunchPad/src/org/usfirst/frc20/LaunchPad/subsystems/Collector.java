// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc20.LaunchPad.subsystems;

import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Talon;
import edu.wpi.first.wpilibj.command.Subsystem;
import org.usfirst.frc20.LaunchPad.commands.CollectorIdleCommand;

/**
 *@author Jacob Melite
 */
public class Collector extends Subsystem {

    private DoubleSolenoid leftDoubleSolenoid;
    private DoubleSolenoid rightDoubleSolenoid;
    private Talon motor;

    public Collector(int leftDoubleSolenoidModuleNumber,
            int leftDoubleSolenoidForwardChannel,
            int leftDoubleSolenoidReverseChannel,
            int rightDoubleSolenoidModuleNumber,
            int rightDoubleSolenoidForwardChannel,
            int rightDoubleSolenoidReverseChannel,
            int rollerMotorChannel) {
        leftDoubleSolenoid = new DoubleSolenoid(leftDoubleSolenoidModuleNumber,
                leftDoubleSolenoidForwardChannel,
                leftDoubleSolenoidReverseChannel);

        rightDoubleSolenoid = new DoubleSolenoid(rightDoubleSolenoidModuleNumber,
                rightDoubleSolenoidForwardChannel,
                rightDoubleSolenoidReverseChannel);

        motor = new Talon(rollerMotorChannel);

    }

    public void initDefaultCommand() {
        setDefaultCommand(new CollectorIdleCommand());//idles as defualt command
    }

    /**
     * sets the right and left doublesolenoids to kForward
     */
    public void extendCollector() {
        leftDoubleSolenoid.set(DoubleSolenoid.Value.kForward);
        rightDoubleSolenoid.set(DoubleSolenoid.Value.kForward);

    }

    /**
     * sets the right and left doublesolenoids to kReverse
     */
    public void retractCollector() {
        leftDoubleSolenoid.set(DoubleSolenoid.Value.kReverse);
        rightDoubleSolenoid.set(DoubleSolenoid.Value.kReverse);
    }

    /**
     * drives the collector at speed <code>speed</code>
     * @param speed a double between -1 and 1
     */
    public void driveCollector(double speed) {
        motor.set(speed);
    }

    /**
     * sets the motor to 0
     */
    public void stopCollector() {
        motor.set(0);
    }

    /**
     * 
     * @return true if the speed is greater than 0 
     */
    public boolean isDrivingForward() {
        return motor.get() > 0;
    }

    /**
     * 
     * @return  true if the motor speed equals 0
     */
    public boolean isStopped() {
        return motor.get() == 0;
    }

    /**
     * 
     * @return true if the motor speed is below 0
     */
    public boolean isDrivingBackwards() {
        return motor.get() < 0;
    }

    /**
     * 
     * @return true if both doublesolenoids have a value of kForward
     */
    public boolean isExtended() {
        return leftDoubleSolenoid.get().equals(DoubleSolenoid.Value.kForward)
                && rightDoubleSolenoid.get().equals(DoubleSolenoid.Value.kForward);
    }

    /**
     * 
     * @return true if both doublesolenoids have a value of kReverse
     */
    public boolean isRetracted() {
        return leftDoubleSolenoid.get().equals(DoubleSolenoid.Value.kReverse)
                && rightDoubleSolenoid.get().equals(DoubleSolenoid.Value.kReverse);
    }
}
