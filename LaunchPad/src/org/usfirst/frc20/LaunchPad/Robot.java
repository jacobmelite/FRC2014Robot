package org.usfirst.frc20.LaunchPad;

import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.IterativeRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import org.usfirst.frc20.LaunchPad.commands.*;
import org.usfirst.frc20.LaunchPad.subsystems.*;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the IterativeRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the manifest file in the resource
 * directory.
 */
public class Robot extends IterativeRobot {

    Command autonomousCommand;
    public static OI oi;
    public static Catapult catapault;
    public static Drivetrain drivetrain;
    public static DrivetrainGearbox drivetrainGearbox;
    public static Compressor compressor;
    public static CatcherPanel leftCatcherPanel;
    public static CatcherPanel rightCatcherPanel;
    public static CatcherPanel backCatcherPanel;
    public static Collector collector;
    public static LEDs leds;
    public static Vision vision;
    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    public void robotInit() {
        RobotMap.init();
        catapault = new Catapult(RobotMap.catapultMotor1Channel,
                RobotMap.catapultMotor2Channel,
                RobotMap.catapultPneumaticModule,
                RobotMap.catapultRatchetPneumaticForwardChannel,
                RobotMap.catapultRatchetPneumaticReverseChannel,
                RobotMap.catapultMotorPneumaticForwardChannel,
                RobotMap.catapultMotorPneumaticReverseChannel,
                RobotMap.catapultLimitSwitchChannel);

        drivetrainGearbox = new DrivetrainGearbox(RobotMap.drivetrainGearboxPneumaticModule,
                RobotMap.drivetrainGearboxPneumaticForwardChannel,
                RobotMap.drivetrainGearboxPneumaticReverseChannel);

        drivetrain = new Drivetrain(RobotMap.drivetrainRightTalon1Channel,
                RobotMap.drivetrainRightTalon2Channel,
                RobotMap.drivetrainRightTalon3Channel,
                RobotMap.drivetrainLeftTalon1Channel,
                RobotMap.drivetrainLeftTalon2Channel,
                RobotMap.drivetrainLeftTalon3Channel,
                RobotMap.drivetrainGyroChannel,
                RobotMap.drivetrainLeftEncoderChannelA,
                RobotMap.drivetrainLeftEncoderChannelB,
                RobotMap.drivetrainRightEncoderChannelA,
                RobotMap.drivetrainRightEncoderChannelB);

        compressor = new Compressor(RobotMap.compressorSwitchChannel,
                RobotMap.compressorRelayChannel);
        compressor.start();

        leftCatcherPanel = new CatcherPanel(RobotMap.leftCatcherPanelModuleNumber,
                RobotMap.leftCatcherPanelForwardChannel,
                RobotMap.leftCatcherPanelReverseChannel);

        rightCatcherPanel = new CatcherPanel(RobotMap.rightCatcherPanelModuleNumber,
                RobotMap.rightCatcherPanelForwardChannel,
                RobotMap.rightCatcherPanelReverseChannel);

        backCatcherPanel = new CatcherPanel(RobotMap.backCatcherPanelModuleNumber,
                RobotMap.backCatcherPanelForwardChannel,
                RobotMap.backCatcherPanelReverseChannel);

        collector = new Collector(RobotMap.collectorSolenoidModuleNumber,
                RobotMap.collectorLeftDoubleSolenoidForwardChannel,
                RobotMap.collectorLeftDoubleSolenoidReverseChannel,
                RobotMap.collectorRightDoubleSolenoidForwardChannel,
                RobotMap.collectorRightDoubleSolenoidReverseChannel,
                RobotMap.collectorRollerMotorChannel);

        leds = new LEDs(RobotMap.ledsInitialMode);
        
        vision = new Vision();
        
        // This MUST be here. If the OI creates Commands (which it very likely
        // will), constructing it during the construction of CommandBase (from
        // which commands extend), subsystems are not guaranteed to be
        // yet. Thus, their requires() statements may grab null pointers. Bad
        // news. Don't move it.
        oi = new OI();
        // instantiate the command used for the autonomous period
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        autonomousCommand = new AutonomousCommand();
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
    }

    public void autonomousInit() {
        // schedule the autonomous command (example)
        if (autonomousCommand != null) {
            autonomousCommand.start();
        }
    }

    /**
     * This function is called periodically during autonomous
     */
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to 
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) {
            autonomousCommand.cancel();
        }
        new ArcadeDriveCommand().start();
    }

    /**
     * This function is called periodically during operator control
     */
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    }

    /**
     * This function called periodically during test mode
     */
    public void testPeriodic() {
        LiveWindow.run();
    }
}
