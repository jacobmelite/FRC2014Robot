// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.
package org.usfirst.frc20.LaunchPad;

import edu.wpi.first.wpilibj.buttons.Button;
import edu.wpi.first.wpilibj.buttons.JoystickButton;
import org.usfirst.frc20.LaunchPad.commands.*;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * This class is the glue that binds the controls on the physical operator
 * interface to the commands and command groups that allow control of the robot.
 */
public class OI {

    public LogitechGamepadController logitechGamepadController;
    public LogitechDualActionController logitechDualActionController;
    public Button driverButtonA = logitechGamepadController.getAButton();
    public Button driverButtonB = logitechGamepadController.getBButton();
    public Button driverButtonX = logitechGamepadController.getXButton();
    public Button driverButtonY = logitechGamepadController.getYButton();
    public Button driverButtonLB = logitechGamepadController.getLeftBumper();
    public Button driverButtonRB = logitechGamepadController.getRightBumper();
    public Button driverButtonBack = logitechGamepadController.getBackButton();
    public Button driverButtonStart = logitechGamepadController.getStartButton();
    public Button operatorButton1 = logitechDualActionController.getButton(1);
    public Button operatorButton2 = logitechDualActionController.getButton(2);
    public Button operatorButton3 = logitechDualActionController.getButton(3);
    public Button operatorButton4 = logitechDualActionController.getButton(4);
    public Button operatorButton5 = logitechDualActionController.getButton(5);
    public Button operatorButton6 = logitechDualActionController.getButton(6);
    public Button operatorButton7 = logitechDualActionController.getButton(7);
    public Button operatorButton8 = logitechDualActionController.getButton(8);
    //// CREATING BUTTONS
    // One type of button is a joystick button which is any button on a joystick.
    // You create one by telling it which joystick it's on and which button
    // number it is.
    // Joystick stick = new Joystick(port);
    // Button button = new JoystickButton(stick, buttonNumber);

    // Another type of button you can create is a DigitalIOButton, which is
    // a button or switch hooked up to the cypress module. These are useful if
    // you want to build a customized operator interface.
    // Button button = new DigitalIOButton(1);
    // There are a few additional built in buttons you can use. Additionally,
    // by subclassing Button you can create custom triggers and bind those to
    // commands the same as any other Button.
    //// TRIGGERING COMMANDS WITH BUTTONS
    // Once you have a button, it's trivial to bind it to a button in one of
    // three ways:
    // Start the command when the button is pressed and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenPressed(new ExampleCommand());
    // Run the command while the button is being held down and interrupt it once
    // the button is released.
    // button.whileHeld(new ExampleCommand());
    // Start the command when the button is released  and let it run the command
    // until it is finished as determined by it's isFinished method.
    // button.whenReleased(new ExampleCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public OI(LogitechDualActionController dualActionController, LogitechGamepadController gamepad) {
        this.logitechDualActionController = dualActionController;
        this.logitechGamepadController = gamepad;
        SmartDashboard.putData("Autonomous Command", new AutonomousCommand());
        
        /*driverButtonA.whenPressed(new BrakeCommand());
        //driverButtonB.whenPressed(new CatapaultSweetSpotRetractAndShootCommandGroup());
       // driverButtonX.whenPressed(new ArcadeDriveCommand());
        
        driverButtonY.whenPressed(new CollectorExtendOrRetractCommand());//alternates the collector between extended and retracted
        driverButtonRB.whenPressed(new CollectorDriveForwardCommand());
        driverButtonLB.whenPressed(new CollectorDriveBackCommand());
        driverButtonStart.whenPressed(new DrivetrainGearboxShiftHighCommand());
        driverButtonBack.whenPressed(new DrivetrainGearboxShiftLowCommand());*/

    }

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=FUNCTIONS
}
